package day4;

public class Dao_1 {
    /**
     * Dao - data access object - обьект доступа к данным(обычный джава обьект), это соответсвие между классами в джаве
     * и таблицами в базе данных.
     * Базы данных представляют какие-то таблицы с какими-то реляционными связями - (реляционная модель)
     * Джаву представляют какие-то классы с связями по ссылкам - (обьектная модель)
     *
     * А Dao как раз занимается тем что преобразовывает данные с реляционной модели(базы данных) в обьектную(джава) и наоборот
     *
     * Dao представляет из себя набор классов лежащий в каком-то пакете. Каждый из Dao обьектов представлен в видео синглотонов
     * (синглтон гласит - на в дао может быть только 1 обьект, в нашем случае который будет представлять бауз данных, то
     * получается что =========== на каждый Dao обьект припадает 1 таблица базы данных =========================)
     * так же и ============ ентити будет ровно один класс на одну таблицу =============
     *
     * И выходит соотвестиве на 1 класс джава(ентити) припадает 1 таблица базы данных.
     *
     *
     *
     * То есть у нас есть 1 Dao обьект с методами(удаление/сохранение/нахождение) и джава класс который является
     * проекцией таблицы. На каждую таблицу должен припадать только 1 класс проекция(енитити)
     *
     * Енитити представляет строку из таблицы, и при вызове метода получения каких-то элементов, то нам
     * должен вернуться список с строками с данными обьектами 1 типа.
     *
     * Чтобы так часто не делать преобразование из реляционной модели в обьектную или наоборот, придумали специальные
     * ORM которые за это отвечают, например Hibernate.
     *
     * По стуи джава приложение представляет прослойку из разных частей, например наша бд, и обьекты DAO, а первый
     * слой работы с ними является DAO, с самой DAO уже работают другие прослойки, но эта 2 прослойка не имеет
     * доступа до самой бд, и нагих обьектов DAO
     */
}
